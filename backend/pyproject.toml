[tool.poetry]
name = "ayuda-dana-backend"
version = "0.1.0"
description = "Backend for ayuda-dana"
authors = ["mianfg <hello@mianfg.me>"]
include = ["CHANGELOG.md", "LICENSE", "py.typed"]

license = ""
readme = "README.md"
homepage = "https://coinscrapfinance.com"
documentation = "https://coinscrapfinance.com"


[tool.poetry.dependencies]
python = "^3.10"
fastapi-sso = "*"
python-jose = { extras = ["cryptography"], version = "*" }
fastapi = "*"
uvicorn = "*"
pymongo = { extras = ["srv"], version = "*" }
motor = "*"
mongoengine = "*"
pydantic-extra-types = "^2.9.0"
phonenumbers = "^8.13.48"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
ipykernel = "^6.29.4"  # notebooks

[tool.poetry.group.linters]
optional = false

[tool.poetry.group.linters.dependencies]
ruff = ">=0.5.2"

[tool.poetry.group.tests]
optional = false

[tool.poetry.group.tests.dependencies]
pytest = "^8.2.2"


[tool.ruff]
line-length = 120
show-fixes = true
src = ["src", ]
target-version = "py39"

[tool.ruff.lint]
select = [
    "A", # Builtins
    "ANN", # Annotations
    "ARG", # Unused arguments
    "B", # Bugbear
    "BLE", # Blind except
    "C4", # Comprehensions
    "C90", # mccabe
    "COM", # Commas
    "D1", # Undocumented public elements
    "D2", # Docstring conventions
    "D3", # Triple double quotes
    "D4", # Docstring text format
    "DTZ", # Datetimes
    "EM", # Error messages
    "ERA", # Commented-out code
    "EXE", # Executable
    "F", # Pyflakes
    "FA", # __future__ annotations
    "FLY", # F-strings
    # "FURB", # Refurb
    "G", # Logging format
    "I", # Isort
    "ICN", # Import conventions
    "INP", # Disallow PEP-420 (Implicit namespace packages)
    "INT", # gettext
    "ISC", # Implicit str concat
    # "LOG",  # Logging
    "N", # PEP-8 Naming
    "NPY", # Numpy
    "PERF", # Unnecessary performance costs
    "PGH", # Pygrep hooks
    "PIE", # Unnecessary code
    "PL", # Pylint
    "PT", # Pytest
    "PYI", # Stub files
    "Q", # Quotes
    "RET", # Return
    "RUF", # Ruff
    "RSE", # Raise
    "S", # Bandit
    "SIM", # Code simplification
    "SLF", # Private member access
    "SLOT", # __slots__
    "T10", # Debugger
    "T20", # Print
    "TCH", # Type checking
    "TID", # Tidy imports
    "TRY", # Exception handling
    "UP", # Pyupgrade
    "W", # Warnings
    "YTT", # sys.version
]
ignore = [
    "ANN101", # self should not be annotated
    "D203", # One blank line before class docstring
    "D212", # Multi-line summary first line
    "FA100", "FA102", # Cannot allow from __tuture__ import annotations
    "PLR0913", # Too many arguments
    "Q000", # Single quotes found but double quotes preferred
    "D416", # Do not end in colon
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104", "F401", "F403", "F405", ]
"tests/*" = ["ANN", "ARG", "INP001", "S101", ]

[tool.ruff.lint.pylint]
max-args = 15
max-branches = 20
max-returns = 10
max-statements = 80

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-bugbear]
# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.
extend-immutable-calls = ["Depends", "fastapi.Depends", "fastapi.params.Depends", "Security", "APIKeyCookie"]

# extend-immutable-calls = ["Depends", "fastapi.Depends", "fastapi.params.Depends", "Security", "APIKeyCookie"]
